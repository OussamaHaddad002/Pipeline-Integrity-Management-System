version: '3.8'

services:
  # PostgreSQL database with PostGIS extension
  database:
    image: postgis/postgis:15-3.4
    container_name: pipeline-risk-db
    environment:
      POSTGRES_DB: pipeline_risk
      POSTGRES_USER: pipeline_user
      POSTGRES_PASSWORD: pipeline_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - pipeline-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pipeline_user -d pipeline_risk"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend Node.js API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pipeline-risk-api
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://pipeline_user:pipeline_password@database:5432/pipeline_risk
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      FRONTEND_URL: http://localhost:3000
      LOG_LEVEL: info
      PYTHON_API_URL: http://ai-model:8000
    ports:
      - "5000:5000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - pipeline-network
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pipeline-risk-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000
      REACT_APP_WS_URL: ws://localhost:5000
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - pipeline-network
    restart: unless-stopped

  # Python AI/ML service
  ai-model:
    build:
      context: ./ai-model
      dockerfile: Dockerfile
    container_name: pipeline-risk-ai
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql://pipeline_user:pipeline_password@database:5432/pipeline_risk
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - pipeline-network
    restart: unless-stopped
    volumes:
      - ai_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional but recommended for production)
  cache:
    image: redis:7-alpine
    container_name: pipeline-risk-cache
    ports:
      - "6379:6379"
    networks:
      - pipeline-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: pipeline-risk-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - pipeline-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ai_models:
    driver: local

networks:
  pipeline-network:
    driver: bridge
